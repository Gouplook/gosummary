// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: mapmatching.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MapMatchingClient is the client API for MapMatching service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapMatchingClient interface {
	MapMatch(ctx context.Context, in *MapMatchReq, opts ...grpc.CallOption) (*MapMatchResult, error)
}

type mapMatchingClient struct {
	cc grpc.ClientConnInterface
}

func NewMapMatchingClient(cc grpc.ClientConnInterface) MapMatchingClient {
	return &mapMatchingClient{cc}
}

func (c *mapMatchingClient) MapMatch(ctx context.Context, in *MapMatchReq, opts ...grpc.CallOption) (*MapMatchResult, error) {
	out := new(MapMatchResult)
	err := c.cc.Invoke(ctx, "/pb.MapMatching/MapMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapMatchingServer is the server API for MapMatching service.
// All implementations must embed UnimplementedMapMatchingServer
// for forward compatibility
type MapMatchingServer interface {
	MapMatch(context.Context, *MapMatchReq) (*MapMatchResult, error)
	mustEmbedUnimplementedMapMatchingServer()
}

// UnimplementedMapMatchingServer must be embedded to have forward compatible implementations.
type UnimplementedMapMatchingServer struct {
}

func (UnimplementedMapMatchingServer) MapMatch(context.Context, *MapMatchReq) (*MapMatchResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapMatch not implemented")
}
func (UnimplementedMapMatchingServer) mustEmbedUnimplementedMapMatchingServer() {}

// UnsafeMapMatchingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapMatchingServer will
// result in compilation errors.
type UnsafeMapMatchingServer interface {
	mustEmbedUnimplementedMapMatchingServer()
}

func RegisterMapMatchingServer(s grpc.ServiceRegistrar, srv MapMatchingServer) {
	s.RegisterService(&MapMatching_ServiceDesc, srv)
}

func _MapMatching_MapMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapMatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapMatchingServer).MapMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MapMatching/MapMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapMatchingServer).MapMatch(ctx, req.(*MapMatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MapMatching_ServiceDesc is the grpc.ServiceDesc for MapMatching service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MapMatching_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MapMatching",
	HandlerType: (*MapMatchingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MapMatch",
			Handler:    _MapMatching_MapMatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mapmatching.proto",
}
