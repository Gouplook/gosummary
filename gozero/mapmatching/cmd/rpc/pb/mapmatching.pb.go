// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.1
// source: mapmatching.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CarLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarId        string  `protobuf:"bytes,1,opt,name=car_id,json=carId,proto3" json:"car_id,omitempty"`                        // 车辆id
	Lat          float64 `protobuf:"fixed64,2,opt,name=lat,proto3" json:"lat,omitempty"`                                       // 维度
	Lng          float64 `protobuf:"fixed64,3,opt,name=lng,proto3" json:"lng,omitempty"`                                       // 经度
	Theta        float64 `protobuf:"fixed64,4,opt,name=theta,proto3" json:"theta,omitempty"`                                   // 航向
	ReqTimestamp float64 `protobuf:"fixed64,5,opt,name=req_timestamp,json=reqTimestamp,proto3" json:"req_timestamp,omitempty"` //时间戳，返回时透传回去
}

func (x *CarLocation) Reset() {
	*x = CarLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapmatching_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarLocation) ProtoMessage() {}

func (x *CarLocation) ProtoReflect() protoreflect.Message {
	mi := &file_mapmatching_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarLocation.ProtoReflect.Descriptor instead.
func (*CarLocation) Descriptor() ([]byte, []int) {
	return file_mapmatching_proto_rawDescGZIP(), []int{0}
}

func (x *CarLocation) GetCarId() string {
	if x != nil {
		return x.CarId
	}
	return ""
}

func (x *CarLocation) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *CarLocation) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

func (x *CarLocation) GetTheta() float64 {
	if x != nil {
		return x.Theta
	}
	return 0
}

func (x *CarLocation) GetReqTimestamp() float64 {
	if x != nil {
		return x.ReqTimestamp
	}
	return 0
}

type CarProjPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat        float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`                                // 维度
	Lng        float64 `protobuf:"fixed64,2,opt,name=lng,proto3" json:"lng,omitempty"`                                // 经度
	Theta      float64 `protobuf:"fixed64,3,opt,name=theta,proto3" json:"theta,omitempty"`                            // 航向
	SegId      int64   `protobuf:"varint,4,opt,name=seg_id,json=segId,proto3" json:"seg_id,omitempty"`                // 车道Id
	LaneId     int64   `protobuf:"varint,5,opt,name=lane_id,json=laneId,proto3" json:"lane_id,omitempty"`             // 车道Id
	Distance   float64 `protobuf:"fixed64,6,opt,name=distance,proto3" json:"distance,omitempty"`                      // distance
	ProjStatus int32   `protobuf:"varint,7,opt,name=proj_status,json=projStatus,proto3" json:"proj_status,omitempty"` // 匹配状态 0：在lane上， 1：不在lane上：匹配的是范围内最近的路网点
	LaneLength float64 `protobuf:"fixed64,8,opt,name=lane_length,json=laneLength,proto3" json:"lane_length,omitempty"`
	LaneType   int32   `protobuf:"varint,9,opt,name=lane_type,json=laneType,proto3" json:"lane_type,omitempty"`
}

func (x *CarProjPoint) Reset() {
	*x = CarProjPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapmatching_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarProjPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarProjPoint) ProtoMessage() {}

func (x *CarProjPoint) ProtoReflect() protoreflect.Message {
	mi := &file_mapmatching_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarProjPoint.ProtoReflect.Descriptor instead.
func (*CarProjPoint) Descriptor() ([]byte, []int) {
	return file_mapmatching_proto_rawDescGZIP(), []int{1}
}

func (x *CarProjPoint) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *CarProjPoint) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

func (x *CarProjPoint) GetTheta() float64 {
	if x != nil {
		return x.Theta
	}
	return 0
}

func (x *CarProjPoint) GetSegId() int64 {
	if x != nil {
		return x.SegId
	}
	return 0
}

func (x *CarProjPoint) GetLaneId() int64 {
	if x != nil {
		return x.LaneId
	}
	return 0
}

func (x *CarProjPoint) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *CarProjPoint) GetProjStatus() int32 {
	if x != nil {
		return x.ProjStatus
	}
	return 0
}

func (x *CarProjPoint) GetLaneLength() float64 {
	if x != nil {
		return x.LaneLength
	}
	return 0
}

func (x *CarProjPoint) GetLaneType() int32 {
	if x != nil {
		return x.LaneType
	}
	return 0
}

type MapMatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locations []*CarLocation `protobuf:"bytes,1,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (x *MapMatchReq) Reset() {
	*x = MapMatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapmatching_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapMatchReq) ProtoMessage() {}

func (x *MapMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_mapmatching_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapMatchReq.ProtoReflect.Descriptor instead.
func (*MapMatchReq) Descriptor() ([]byte, []int) {
	return file_mapmatching_proto_rawDescGZIP(), []int{2}
}

func (x *MapMatchReq) GetLocations() []*CarLocation {
	if x != nil {
		return x.Locations
	}
	return nil
}

type MapMatchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CarId        string            `protobuf:"bytes,1,opt,name=car_id,json=carId,proto3" json:"car_id,omitempty"`
	CarResults   []*MapMatchResult `protobuf:"bytes,2,rep,name=carResults,proto3" json:"carResults,omitempty"` //匹配结果，按照距车辆位置的距离降序排序
	Code         int64             `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	Message      string            `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	RspTimestamp float64           `protobuf:"fixed64,5,opt,name=rsp_timestamp,json=rspTimestamp,proto3" json:"rsp_timestamp,omitempty"`
}

func (x *MapMatchResult) Reset() {
	*x = MapMatchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapmatching_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapMatchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapMatchResult) ProtoMessage() {}

func (x *MapMatchResult) ProtoReflect() protoreflect.Message {
	mi := &file_mapmatching_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapMatchResult.ProtoReflect.Descriptor instead.
func (*MapMatchResult) Descriptor() ([]byte, []int) {
	return file_mapmatching_proto_rawDescGZIP(), []int{3}
}

func (x *MapMatchResult) GetCarId() string {
	if x != nil {
		return x.CarId
	}
	return ""
}

func (x *MapMatchResult) GetCarResults() []*MapMatchResult {
	if x != nil {
		return x.CarResults
	}
	return nil
}

func (x *MapMatchResult) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MapMatchResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MapMatchResult) GetRspTimestamp() float64 {
	if x != nil {
		return x.RspTimestamp
	}
	return 0
}

var File_mapmatching_proto protoreflect.FileDescriptor

var file_mapmatching_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x61, 0x70, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x72, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x72, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xf3, 0x01,
	0x0a, 0x0c, 0x43, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x65, 0x67, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6c, 0x61, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x61, 0x6e, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x3c, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x12, 0x2d, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xae, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x63,
	0x61, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x73, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x73, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x32, 0x3e, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x12, 0x2f, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x12,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_mapmatching_proto_rawDescOnce sync.Once
	file_mapmatching_proto_rawDescData = file_mapmatching_proto_rawDesc
)

func file_mapmatching_proto_rawDescGZIP() []byte {
	file_mapmatching_proto_rawDescOnce.Do(func() {
		file_mapmatching_proto_rawDescData = protoimpl.X.CompressGZIP(file_mapmatching_proto_rawDescData)
	})
	return file_mapmatching_proto_rawDescData
}

var file_mapmatching_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_mapmatching_proto_goTypes = []interface{}{
	(*CarLocation)(nil),    // 0: pb.CarLocation
	(*CarProjPoint)(nil),   // 1: pb.CarProjPoint
	(*MapMatchReq)(nil),    // 2: pb.MapMatchReq
	(*MapMatchResult)(nil), // 3: pb.MapMatchResult
}
var file_mapmatching_proto_depIdxs = []int32{
	0, // 0: pb.MapMatchReq.locations:type_name -> pb.CarLocation
	3, // 1: pb.MapMatchResult.carResults:type_name -> pb.MapMatchResult
	2, // 2: pb.MapMatching.MapMatch:input_type -> pb.MapMatchReq
	3, // 3: pb.MapMatching.MapMatch:output_type -> pb.MapMatchResult
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_mapmatching_proto_init() }
func file_mapmatching_proto_init() {
	if File_mapmatching_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mapmatching_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapmatching_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarProjPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapmatching_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapMatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapmatching_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapMatchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mapmatching_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mapmatching_proto_goTypes,
		DependencyIndexes: file_mapmatching_proto_depIdxs,
		MessageInfos:      file_mapmatching_proto_msgTypes,
	}.Build()
	File_mapmatching_proto = out.File
	file_mapmatching_proto_rawDesc = nil
	file_mapmatching_proto_goTypes = nil
	file_mapmatching_proto_depIdxs = nil
}
