syntax = "proto3";
package pb;
option go_package = "./pb";

message CarLocation {
  string car_id = 1; // 车辆id
  double lat    = 2; // 维度
  double lng    = 3; // 经度
  double theta  = 4; // 航向
  double req_timestamp = 5; //时间戳，返回时透传回去
}

message CarProjPoint {
  double lat    = 1; // 维度
  double lng    = 2; // 经度
  double theta  = 3; // 航向
  int64  seg_id = 4; // 车道Id
  int64  lane_id = 5; // 车道Id
  double distance = 6; // distance
  int32  proj_status = 7; // 匹配状态 0：在lane上， 1：不在lane上：匹配的是范围内最近的路网点
  double lane_length = 8;
  int32  lane_type  = 9;
}

message MapMatchReq {
  repeated  CarLocation  locations = 1;
}

message MapMatchResult {
  string  car_id = 1;
  repeated MapMatchResult carResults = 2;  //匹配结果，按照距车辆位置的距离降序排序
  int64 code = 3;
  string message = 4;
  double rsp_timestamp = 5;
}

service MapMatching {
  rpc MapMatch(MapMatchReq) returns (MapMatchResult);
}