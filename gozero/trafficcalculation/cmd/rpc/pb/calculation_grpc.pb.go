// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: calculation.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrafficCalculationClient is the client API for TrafficCalculation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrafficCalculationClient interface {
	// 查询拥堵状态
	QueryCurrentTraffic(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*TrafficStatusResp, error)
}

type trafficCalculationClient struct {
	cc grpc.ClientConnInterface
}

func NewTrafficCalculationClient(cc grpc.ClientConnInterface) TrafficCalculationClient {
	return &trafficCalculationClient{cc}
}

func (c *trafficCalculationClient) QueryCurrentTraffic(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*TrafficStatusResp, error) {
	out := new(TrafficStatusResp)
	err := c.cc.Invoke(ctx, "/pb.TrafficCalculation/QueryCurrentTraffic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrafficCalculationServer is the server API for TrafficCalculation service.
// All implementations must embed UnimplementedTrafficCalculationServer
// for forward compatibility
type TrafficCalculationServer interface {
	// 查询拥堵状态
	QueryCurrentTraffic(context.Context, *QueryReq) (*TrafficStatusResp, error)
	mustEmbedUnimplementedTrafficCalculationServer()
}

// UnimplementedTrafficCalculationServer must be embedded to have forward compatible implementations.
type UnimplementedTrafficCalculationServer struct {
}

func (UnimplementedTrafficCalculationServer) QueryCurrentTraffic(context.Context, *QueryReq) (*TrafficStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCurrentTraffic not implemented")
}
func (UnimplementedTrafficCalculationServer) mustEmbedUnimplementedTrafficCalculationServer() {}

// UnsafeTrafficCalculationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrafficCalculationServer will
// result in compilation errors.
type UnsafeTrafficCalculationServer interface {
	mustEmbedUnimplementedTrafficCalculationServer()
}

func RegisterTrafficCalculationServer(s grpc.ServiceRegistrar, srv TrafficCalculationServer) {
	s.RegisterService(&TrafficCalculation_ServiceDesc, srv)
}

func _TrafficCalculation_QueryCurrentTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficCalculationServer).QueryCurrentTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TrafficCalculation/QueryCurrentTraffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficCalculationServer).QueryCurrentTraffic(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TrafficCalculation_ServiceDesc is the grpc.ServiceDesc for TrafficCalculation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrafficCalculation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TrafficCalculation",
	HandlerType: (*TrafficCalculationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryCurrentTraffic",
			Handler:    _TrafficCalculation_QueryCurrentTraffic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculation.proto",
}
